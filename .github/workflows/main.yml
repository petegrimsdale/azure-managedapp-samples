name: Publish storage template

on:
  push:
    paths:
      - "pg_templates/**"
  workflow_dispatch:

env:
  TEMPLATES_STORAGE_ACCOUNT_NAME: pegrimtemplates

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get container name
        run: |
          echo "CONTAINER_NAME=$(echo ${GITHUB_REF#refs/heads/} | awk '{print tolower(substr(gensub("_|--+", "-", "g", $0), 1, 63))}')" >> $GITHUB_ENV

      - name: Create container
        run: |
          az storage container create \
            --auth-mode login \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --name ${{ env.CONTAINER_NAME }}

      - name: Build Bicep templates
        run: |
          az bicep build --file pg_templates/managed_storage/main.bicep

      - name: Check custom deployment wiring
        run: ./.github/scripts/check_templates_wiring.py
        env:
          MAIN_TEMPLATE_PATH: pg_templates/managed_storage/main.json
          UI_TEMPLATE_PATH: pg_templates/managed_storage/createUiDefinition.json

      - name: Upload templates to storage account
        id: upload
        run: |
          sudo apt-get install -y gridsite-clients
          expiry_date=$(date -u -d "7 days" '+%Y-%m-%dT%H:%MZ')

          az storage blob upload \
            --auth-mode login \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --file pg_templates/managed_storage/main.json \
            --name main.json \
            --overwrite true
          templateurl=$(az storage blob url \
            --auth-mode login \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --name main.json \
            --output tsv)
          templatesas=$(az storage blob generate-sas \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --name main.json \
            --permissions r \
            --expiry $expiry_date \
            --https-only \
            --output tsv)

          az storage blob upload \
            --auth-mode login \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --file pg_templates/managed_storage/createUiDefinition.json \
            --name creatUiDefinition.json \
            --overwrite true
          portalurl=$(az storage blob url \
            --auth-mode login \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --name main.portal.json \
            --output tsv)
          portalsas=$(az storage blob generate-sas \
            --account-name ${{ env.TEMPLATES_STORAGE_ACCOUNT_NAME }} \
            --container-name ${{ env.CONTAINER_NAME }} \
            --name main.portal.json \
            --permissions r \
            --expiry $expiry_date \
            --https-only \
            --output tsv)

          main_template_sas_url="${templateurl}?${templatesas}"
          ui_template_sas_url="${portalurl}?${portalsas}"

          echo "::set-output name=main-template-sas-url::$(echo $main_template_sas_url)"
          echo "::set-output name=ui-template-sas-url::$(echo $ui_template_sas_url)"

      - name: Show custom deployment link
        run: |
          set -euo pipefail
          main_template_sas_url=$(urlencode "${{ steps.upload.outputs.main-template-sas-url }}")
          ui_template_sas_url=$(urlencode "${{ steps.upload.outputs.ui-template-sas-url }}")
          echo
          echo "Click the link below to launch a custom deployment ðŸš€"
          echo
          echo "https://portal.azure.com/#blade/Microsoft_Azure_CreateUIDef/CustomDeploymentBlade/uri/${main_template_sas_url}/createUIDefinitionUri/${ui_template_sas_url}"

